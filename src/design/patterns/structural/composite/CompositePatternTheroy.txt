https://javatechonline.com/design-patterns-in-java-2
Composite Design Pattern
There are times when you feel a need of a tree data structure in your code. However, there are many variations to the tree data structure, but sometimes there is a need for a tree in which both branches, as well as the leaves of the tree, should be treated uniformly.

The Composite Pattern allows you to compose objects into a tree structure to represent the part-whole hierarchy. It means you can create a tree of objects that is made of different parts, but that can be treated as a whole one big thing. Composite lets clients treat individual objects and compositions of objects uniformly, that’s the intent of the Composite Pattern.

In the composite pattern, a tree structure exists where identical operations can be performed on leaves and nodes. A node in a tree is a class that can have children. A node class is a ‘composite’ class. A leaf in a tree is a ‘primitive’ class that does not have children. The children of a composite can be leaves or other composites.

The leaf class and the composite class share a common ‘component’ interface that defines the common operations that can be performed on leaves and composites. When an operation on a composite is performed, this operation is performed on all children of the composite, whether they are leaves or composites. Hence, the composite pattern can be used to perform common operations on the objects that compose a tree.

Objects in the Composite Pattern:
Base Component – Base component is the interface for all objects in the composition. Client program uses base component to work with the objects in the composition. Moreover, it can be an interface or an abstract class with some methods common to all the objects.

Leaf – Defines the behavior for the elements in the composition. It is the building block for the composition and implements base component. Although, it doesn’t have references to other Components.

Composite – It consists of leaf elements and implements the operations in base component.

Example
For example, let’s assume an organization hierarchy in terms of the Composite Pattern. Let’s assume Manager as Composite, Employee as Component, and Developer as the Leaf. First we will create component interface. It represents object in composition.  It has all common operations that will be applicable to both manager and developer.

When to use Composite Pattern:
Below is the conditions when we can use this pattern:

1.When we want to represent part-whole hierarchies of objects.
2.When we want clients to be able to ignore the difference between compositions of objects and individual objects. Clients will treat all objects in the composite structure uniformly.

Usage in JDK
java.awt.Container#add (Component) is a great example of Composite pattern in java and used a lot in Swing.
